version: '3.8'

services:
  # Hauptanwendung
  latex-converter:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-your-production-secret-key}
      - MODEL_NAME=${MODEL_NAME:-microsoft/phi-4-mini-instruct}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-60}
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./cache:/app/cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development-Service
  latex-converter-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "5001:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - SECRET_KEY=dev-secret-key
      - MODEL_NAME=microsoft/phi-4-mini-instruct
      - LOG_LEVEL=DEBUG
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./models:/app/models
    command: ["python", "app.py"]
    profiles:
      - dev

  # Redis für Caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    profiles:
      - cache

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - latex-converter
    restart: unless-stopped
    profiles:
      - production

  # Monitoring mit Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    profiles:
      - monitoring

  # Grafana für Dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

# Networks
networks:
  default:
    driver: bridge
